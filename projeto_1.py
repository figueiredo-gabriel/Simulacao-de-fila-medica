# -*- coding: utf-8 -*-
"""Projeto 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YQ_qQieYRwcKkToZT7W4meZZ-xe0DfMZ

# Simula칞칚o de uma Fila de Espera em um Atendimento M칠dico
"""

import sys  # Importa o m칩dulo para medir uso de mem칩ria

# Representa칞칚o de um paciente na fila
class Paciente:
    def __init__(self, nome, idade, prioridade):
        # Atributos principais
        self.nome = nome
        self.idade = idade
        self.prioridade = prioridade  # 1 = normal, 2 = priorit치rio

        # Ponteiros p/ formar a lista duplamente encadeada
        self.anterior = None
        self.proximo = None

    # Mostra o paciente no terminal com nome e tipo
    def __str__(self):
        tipo = '(P)' if self.prioridade == 2 else '(N)'
        return f'[ {self.nome} {tipo} ]'

# Gerenciamento de toda a fila de atendimento
class Fila_medica:
    def __init__(self):
        self.inicio = None
        self.fim = None
        self.turno = 2  # Come칞a removendo priorit치rios

    # Fun칞칚o auxiliar que calcula mem칩ria total usada pela fila
    def calcular_memoria_total(self):
        total = sys.getsizeof(self)
        atual = self.inicio
        while atual:
            total += sys.getsizeof(atual)
            total += sys.getsizeof(atual.nome)
            total += sys.getsizeof(atual.idade)
            total += sys.getsizeof(atual.prioridade)
            atual = atual.proximo
        return total

    # Fun칞칚o que exibe o uso de mem칩ria
    def monitorar_memoria(self, antes, depois):
        print(f'Mem칩ria antes: {antes} bytes')
        print(f'Mem칩ria depois: {depois} bytes')
        print(f'Varia칞칚o: {depois - antes} bytes')

    # Adiciona um paciente na fila
    def add_pacientes(self, nome, idade, prioridade):
        paciente = Paciente(nome, idade, prioridade)
        memoria_antes = self.calcular_memoria_total()

        # Caso a fila esteja vazia
        if self.inicio is None:
            self.inicio = self.fim = paciente

        # Se o paciente for priorit치rio
        elif prioridade == 2:
            atual = self.inicio
            while atual and atual.prioridade == 2:
                atual = atual.proximo

            # Se todos forem priorit치rios
            if atual is None:
                self.fim.proximo = paciente
                paciente.anterior = self.fim
                self.fim = paciente

            # Se ele for o primeiro
            elif atual == self.inicio:
                paciente.proximo = self.inicio
                self.inicio.anterior = paciente
                self.inicio = paciente

            # Se o paciente tiver que entrar no meio da fila, entre outros dois pacientes
            else:
                anterior = atual.anterior
                anterior.proximo = paciente
                paciente.anterior = anterior
                paciente.proximo = atual
                atual.anterior = paciente

        # Se N칚o for prioritario
        else:
            self.fim.proximo = paciente
            paciente.anterior = self.fim
            self.fim = paciente

        print(f'Paciente {nome} adicionado com sucesso.')
        memoria_depois = self.calcular_memoria_total()
        self.monitorar_memoria(memoria_antes, memoria_depois)

    # Remove um paciente da fila
    def remover_paciente(self):
        if self.inicio is None:
            print('Fila vazia')
            return

        # Contar pacientes
        normais = 0
        prioritarios = 0
        atual = self.inicio
        while atual:
            if atual.prioridade == 2:
                prioritarios += 1
            else:
                normais += 1
            atual = atual.proximo

        # Calcular propor칞칚o
        proporcao = prioritarios / normais if normais != 0 else float('inf')

        # Altern칙ncia de remo칞칚o
        if proporcao >= 1/7:
            tipo_remover = 1 if self.turno == 2 else 2
            self.turno = 2 if tipo_remover == 1 else 1
        else:
            tipo_remover = 2 if prioritarios > 0 else 1

        # Procurar o primeiro paciente do tipo certo
        atual = self.inicio
        while atual and atual.prioridade != tipo_remover:
            atual = atual.proximo

        if atual is None:
            print('Nenhum paciente do tipo apropriado foi encontrado para a remo칞칚o.')
            return

        memoria_antes = self.calcular_memoria_total()
        print(f'Removendo o paciente: {atual.nome} ({"P" if atual.prioridade == 2 else "N"})')

        # Atualizar ponteiros
        if atual.anterior:
            atual.anterior.proximo = atual.proximo
        else:
            self.inicio = atual.proximo

        if atual.proximo:
            atual.proximo.anterior = atual.anterior
        else:
            self.fim = atual.anterior

        memoria_depois = self.calcular_memoria_total()
        self.monitorar_memoria(memoria_antes, memoria_depois)

    # Edita dados de um paciente
    def editar_paciente(self, nome, novo_nome=None, nova_idade=None, nova_prioridade=None):
        atual = self.inicio
        memoria_antes = self.calcular_memoria_total()

        # Busca o paciente na fila
        while atual:
            if atual.nome == nome:
                if novo_nome:
                    atual.nome = novo_nome
                if nova_idade:
                    atual.idade = nova_idade
                if nova_prioridade:
                    atual.prioridade = nova_prioridade
                print(f'Dados do paciente {nome} atualizados com sucesso.')
                break
            atual = atual.proximo

        memoria_depois = self.calcular_memoria_total()
        self.monitorar_memoria(memoria_antes, memoria_depois)

    # Exibe a fila com visual mais organizado
    def exibir_fila(self):
        atual = self.inicio
        if not atual:
            print('Fila Vazia.')
            return

        print("\n游늶 Fila de Atendimento:\n")
        print(f"{'Nome':<15} {'Idade':<7} {'Tipo':<5}")
        print("-" * 30)
        while atual:
            tipo = 'P' if atual.prioridade == 2 else 'N'
            print(f"{atual.nome:<15} {atual.idade:<7} {tipo:<5}")
            atual = atual.proximo
        print()  # linha extra p/ espa칞amento

# Exemplo de uso
if __name__ == '__main__':
    fila = Fila_medica()

    # Adiciona pacientes
    fila.add_pacientes('Pedro', 70, 2)
    fila.add_pacientes('Marcelo', 30, 1)
    fila.add_pacientes('Heitor', 20, 1)
    fila.add_pacientes('Eliane', 28, 1)
    fila.add_pacientes('Gabriel', 18, 1)
    fila.add_pacientes('Helena', 79, 2)

    # Exibe fila
    fila.exibir_fila()

    # Remove paciente
    fila.remover_paciente()
    fila.exibir_fila()

    # Edita dados de um paciente
    fila.editar_paciente('Heitor', nova_idade=19, nova_prioridade=2)
    fila.exibir_fila()

    # extra:

    # Modo interativo
    print("\n==============================")
    print("     MODO INTERATIVO INICIADO")
    print("==============================")
    print("Comandos dispon칤veis:")
    print("  add Nome Idade Prioridade(P/N)  -> Adiciona um novo paciente")
    print("  assist                          -> Remove um paciente da fila")
    print("  edit Nome NovaIdade NovaPrioridade(P/N)  -> Edita dados do paciente")
    print("  show                            -> Mostra a fila atual")
    print("  exit                            -> Encerra o programa")
    print("==============================\n")

    while True:
        comando = input(">> ").strip()
        if not comando:
            continue

        partes = comando.split()

        if partes[0].lower() == 'add' and len(partes) == 4:
            nome = partes[1]
            idade = int(partes[2])
            prioridade = 2 if partes[3].upper() == 'P' else 1
            fila.add_pacientes(nome, idade, prioridade)

        elif partes[0].lower() == 'assist':
            fila.remover_paciente()

        elif partes[0].lower() == 'edit' and len(partes) == 4:
            nome = partes[1]
            nova_idade = int(partes[2])
            nova_prioridade = 2 if partes[3].upper() == 'P' else 1
            fila.editar_paciente(nome, nova_idade=nova_idade, nova_prioridade=nova_prioridade)

        elif partes[0].lower() == 'show':
            fila.exibir_fila()

        elif partes[0].lower() == 'exit':
            print("Encerrando o programa.")
            break

        else:
            print("Comando inv치lido. Tente novamente.")